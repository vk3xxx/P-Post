{
  "name": "P-Post_Content_Automation",
  "comment": "Enterprise-grade workflow: Images use direct URL posting, videos use intelligent processing that elegantly handles both audio+video and video-only cases. TODO: Fix rate_seconds variable passing - currently hardcoded to 45 seconds in WaitImages and WaitVideos nodes.",
  "nodes": [
    {
      "parameters": {},
      "id": "ManualTrigger",
      "name": "ManualTrigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [-1600, 200]
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "subreddit",
              "value": "GOONED"
            },
            {
              "name": "chat_id",
              "value": "-1002899637373"
            }
          ],
          "number": [
            {
              "name": "limit",
              "value": 30
            },
            {
              "name": "rate_seconds",
              "value": 45
            },
            {
              "name": "memory_ttl_days",
              "value": 60
            }
          ]
        },
        "options": {}
      },
      "id": "Vars",
      "name": "Vars",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [-1420, 200]
    },
    {
      "parameters": {
        "url": "https://www.reddit.com/r/GOONED/new.json",
        "options": {
          "timeout": 20000
        }
      },
      "id": "FetchJSON",
      "name": "FetchJSON",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [-1230, 200]
    },
    {
      "parameters": {
        "jsCode": "function dec(u) {\n  try {\n    return u?.replace(/&amp;/g, '&');\n  } catch {\n    return u;\n  }\n}\n\nfunction largestPreview(p) {\n  const img = p?.preview?.images?.[0];\n  return dec(img?.source?.url || img?.s?.u || img?.s?.url);\n}\n\nfunction isImg(u) {\n  return typeof u === 'string' && /(\\.jpg|\\.jpeg|\\.png|\\.gif|\\.webp)(\\?|$)/i.test(u || '');\n}\n\nconst posts = items[0].json?.data?.children || [];\nconst out = [];\n\nfor (const c of posts) {\n  const p = c.data || {};\n  const base = {\n    id: p.id,\n    title: p.title,\n    permalink: `https://www.reddit.com${p.permalink}`,\n    chat_id: $node['Vars'].json['chat_id'],\n    rate_seconds: $node['Vars'].json['rate_seconds']\n  };\n\n  if (p.is_gallery && p.media_metadata) {\n    const ids = p.gallery_data?.items?.map(i => i.media_id) || Object.keys(p.media_metadata);\n    const total = ids.length;\n    ids.forEach((mid, idx) => {\n      const m = p.media_metadata[mid];\n      if (!m) return;\n      const url = dec(m?.s?.u || m?.s?.gif || m?.s?.mp4 || m?.s?.url);\n      if (!url) return;\n      out.push({\n        json: {\n          ...base,\n          is_video: false,\n          media_type: 'image',\n          media_url: url,\n          slide: idx + 1,\n          total\n        }\n      });\n    });\n    continue;\n  }\n\n  const rv = p?.secure_media?.reddit_video || p?.media?.reddit_video || p?.preview?.reddit_video_preview;\n  if (rv?.fallback_url) {\n    const v = dec(rv.fallback_url);\n    let audio = null;\n    \n    // Generate audio URL from video URL\n    try {\n      const videoUrl = new URL(v);\n      const pathParts = videoUrl.pathname.split('/');\n      const filename = pathParts[pathParts.length - 1];\n      \n      // Check if it's a DASH video file\n      if (filename.includes('DASH_') && (filename.endsWith('.mp4') || filename.endsWith('.webm'))) {\n        // Extract quality and extension\n        const match = filename.match(/DASH_(\\d+)(\\.[^.]+)$/);\n        if (match) {\n          const quality = match[1];\n          const extension = match[2];\n          \n          // Construct audio URL\n          const audioFilename = `DASH_audio${extension}`;\n          pathParts[pathParts.length - 1] = audioFilename;\n          videoUrl.pathname = pathParts.join('/');\n          audio = videoUrl.toString();\n        }\n      }\n    } catch (error) {\n      // Audio URL generation failed, continue without audio\n    }\n    \n    out.push({\n      json: {\n        ...base,\n        is_video: true,\n        media_type: 'reddit_video',\n        media_url: v,\n        audio_url: audio,\n        slide: 1,\n        total: 1\n      }\n    });\n    continue;\n  }\n\n  const direct = dec(p.url_overridden_by_dest || p.url);\n  if (isImg(direct)) {\n    out.push({\n      json: {\n        ...base,\n        is_video: false,\n        media_type: 'image',\n        media_url: direct,\n        slide: 1,\n        total: 1\n      }\n    });\n    continue;\n  }\n\n  const prev = largestPreview(p);\n  if (prev) {\n    out.push({\n      json: {\n        ...base,\n        is_video: false,\n        media_type: 'image',\n        media_url: prev,\n        slide: 1,\n        total: 1\n      }\n    });\n  }\n}\n\nreturn out;"
      },
      "id": "ExtractMedia",
      "name": "ExtractMedia",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-1040, 200]
    },
    {
      "parameters": {
        "jsCode": "const state = $getWorkflowStaticData('global');\nif(!state.posted) state.posted={};\nconst ttl=($node['Vars'].json['memory_ttl_days']||60)*24*60*60*1000;\nconst now=Date.now();\nfor(const [k,t] of Object.entries(state.posted)){\n  if(!t||now-t>ttl) delete state.posted[k];\n}\nconst fresh=[];\nfor(const it of items){\n  const k=it.json.key||it.json.media_url||it.json.id;\n  if(!k) continue;\n  if(!state.posted[k]){\n    state.posted[k]=now;\n    fresh.push(it);\n  }\n}\nreturn fresh;"
      },
      "id": "Deduplicate",
      "name": "Deduplicate",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-820, 200]
    },
    {
      "parameters": {
        "jsCode": "return items.map(it => {\n  const j = it.json;\n  j.caption = j.total > 1 ? `${j.title} [${j.slide}/${j.total}]\\n${j.permalink}` : `${j.title}\\n${j.permalink}`;\n  return { json: j };\n});"
      },
      "id": "CaptionBuilder",
      "name": "CaptionBuilder",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-620, 200]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json.is_video}}",
              "value2": true
            }
          ]
        }
      },
      "id": "IfVideo",
      "name": "IfVideo",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [-420, 200]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "SplitImages",
      "name": "SplitImages",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 1,
      "position": [-220, 60]
    },
    {
      "parameters": {
        "operation": "sendPhoto",
        "chatId": "={{$json.chat_id}}",
        "file": "={{ $json.media_url }}",
        "additionalFields": {
          "caption": "={{$json.caption}}"
        }
      },
      "id": "SendPhoto",
      "name": "SendPhoto",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [0, 60]
    },
    {
      "parameters": { "amount": 45, "unit": "seconds" },
      "id": "WaitImages",
      "name": "WaitImages",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [200, 60]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "SplitVideos",
      "name": "SplitVideos",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 1,
      "position": [-220, 340]
    },
    {
      "parameters": {
        "jsCode": "// Enterprise-grade video processor that handles both audio+video and video-only cases\nconst item = $input.item.json;\n\n// Download video first\nconst videoResponse = await fetch(item.media_url);\nif (!videoResponse.ok) {\n  throw new Error(`Failed to download video: ${videoResponse.status} ${videoResponse.statusText}`);\n}\n\nconst videoBuffer = await videoResponse.arrayBuffer();\nconst videoData = Buffer.from(videoBuffer);\n\n// Check if audio URL exists and is valid\nlet audioData = null;\nlet hasAudio = false;\n\nif (item.audio_url && item.audio_url !== 'null' && item.audio_url !== 'undefined') {\n  try {\n    const audioResponse = await fetch(item.audio_url);\n    if (audioResponse.ok) {\n      const audioBuffer = await audioResponse.arrayBuffer();\n      audioData = Buffer.from(audioBuffer);\n      hasAudio = true;\n      console.log(`Audio downloaded successfully for video ${item.id}`);\n    } else {\n      console.log(`Audio download failed for video ${item.id}: ${audioResponse.status}`);\n    }\n  } catch (error) {\n    console.log(`Audio download error for video ${item.id}: ${error.message}`);\n  }\n}\n\n// Create output with video data and audio status\nconst output = {\n  json: {\n    ...item,\n    has_audio: hasAudio,\n    video_size: videoData.length,\n    audio_size: audioData ? audioData.length : 0\n  },\n  binary: {\n    video: {\n      data: videoData,\n      fileName: `video_${item.id}.mp4`,\n      mimeType: 'video/mp4'\n    }\n  }\n};\n\n// Add audio binary if available\nif (audioData) {\n  output.binary.audio = {\n    data: audioData,\n    fileName: `audio_${item.id}.mp4`,\n    mimeType: 'video/mp4'\n  };\n}\n\nreturn [output];"
      },
      "id": "VideoProcessor",
      "name": "VideoProcessor",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [0, 300]
    },
    {
      "parameters": {
        "fileName": "=/tmp/n8n_video_{{$json.id}}_{{$json.media_type}}_{{$json.slide}}.mp4",
        "binaryPropertyName": "video"
      },
      "id": "WriteVideo",
      "name": "WriteVideo",
      "type": "n8n-nodes-base.writeBinaryFile",
      "typeVersion": 1,
      "position": [200, 300]
    },
    {
      "parameters": {
        "jsCode": "// Enterprise-grade video muxing that intelligently handles both audio+video and video-only cases\nconst item = $input.item;\n\n// Validate input\nif (!item || !item.json || !item.binary || !item.binary.video) {\n  throw new Error('Invalid input: Missing video data');\n}\n\nconst videoData = item.binary.video.data;\nconst audioData = item.binary.audio ? item.binary.audio.data : null;\nconst hasAudio = item.json.has_audio;\n\n// Create temporary file paths\nconst videoPath = `/tmp/n8n_video_${item.json.id}_${item.json.media_type}_${item.json.slide}.mp4`;\nconst audioPath = `/tmp/n8n_audio_${item.json.id}_${item.json.media_type}_${item.json.slide}.mp4`;\nconst outputPath = `/tmp/n8n_mux_${item.json.id}_${item.json.media_type}_${item.json.slide}.mp4`;\n\n// Write video file\nconst fs = require('fs');\nfs.writeFileSync(videoPath, videoData);\n\n// Write audio file if available\nif (audioData && hasAudio) {\n  fs.writeFileSync(audioPath, audioData);\n}\n\n// Mux video and audio if both exist, otherwise just copy video\nlet muxCommand;\nif (audioData && hasAudio && fs.existsSync(audioPath)) {\n  muxCommand = `ffmpeg -y -loglevel error -i \"${videoPath}\" -i \"${audioPath}\" -c copy -shortest \"${outputPath}\"`;\n  console.log('Muxing video with audio...');\n} else {\n  muxCommand = `cp \"${videoPath}\" \"${outputPath}\"`;\n  console.log('Copying video only (no audio)...');\n}\n\n// Execute muxing command\nconst { execSync } = require('child_process');\ntry {\n  execSync(muxCommand, { stdio: 'pipe' });\n  console.log('Video processing completed successfully');\n} catch (error) {\n  throw new Error(`Muxing failed: ${error.message}`);\n}\n\n// Read the output file and return it\nconst outputData = fs.readFileSync(outputPath);\n\n// Clean up temporary files\nfs.unlinkSync(videoPath);\nif (fs.existsSync(audioPath)) fs.unlinkSync(audioPath);\n\nreturn [{\n  json: {\n    ...item.json,\n    muxed_file: outputPath,\n    processing_status: 'completed'\n  },\n  binary: {\n    data: {\n      data: outputData,\n      fileName: `muxed_${item.json.id}.mp4`,\n      mimeType: 'video/mp4'\n    }\n  }\n}];"
      },
      "id": "Mux",
      "name": "Mux",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [400, 300]
    },

    {
      "parameters": {
        "jsCode": "// Enterprise-grade data merging with validation\nconst item = $input.item;\n\n// Validate input data\nif (!item || !item.json || !item.binary) {\n  throw new Error('Invalid input: Missing JSON or binary data');\n}\n\n// Preserve all original JSON data\nconst originalData = { ...item.json };\n\n// Create new item with both data and binary\nreturn [{\n  json: originalData,\n  binary: item.binary\n}];"
      },
      "id": "MergeVideoData",
      "name": "MergeVideoData",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [800, 300]
    },
    {
      "parameters": {
        "operation": "sendVideo",
        "chatId": "={{$json.chat_id}}",
        "binaryData": true,
        "additionalFields": {
          "caption": "={{$json.caption}}"
        }
      },
      "id": "SendVideo",
      "name": "SendVideo",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [1000, 300]
    },
    {
      "parameters": {
        "command": "bash -lc \"set -e; ID='{{$json.id}}'; TYPE='{{$json.media_type}}'; SLIDE='{{$json.slide}}'; echo 'Cleaning up temporary files for ID: $ID, Type: $TYPE, Slide: $SLIDE'; rm -f \"/tmp/n8n_video_${ID}_${TYPE}_${SLIDE}.mp4\" \"/tmp/n8n_audio_${ID}_${TYPE}_${SLIDE}.mp4\" \"/tmp/n8n_mux_${ID}_${TYPE}_${SLIDE}.mp4\" || echo 'Some files may not exist (this is normal)'; echo 'Cleanup completed'\""
      },
      "id": "Cleanup",
      "name": "Cleanup",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [1200, 300]
    },

    {
      "parameters": {
        "operation": "sendVideo",
        "chatId": "={{$json.chat_id}}",
        "file": "={{$json.media_url}}",
        "additionalFields": {
          "caption": "={{$json.caption}}"
        }
      },
      "id": "SendVideo",
      "name": "SendVideo",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [1000, 360]
    },

    {
      "parameters": { "amount": 45, "unit": "seconds" },
      "id": "WaitVideos",
      "name": "WaitVideos",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [1400, 360]
    }
  ],
  "connections": {
    "ManualTrigger": { "main": [[{ "node": "Vars", "type": "main", "index": 0 }]] },
    "Vars": { "main": [[{ "node": "FetchJSON", "type": "main", "index": 0 }]] },
    "FetchJSON": { "main": [[{ "node": "ExtractMedia", "type": "main", "index": 0 }]] },
    "ExtractMedia": { "main": [[{ "node": "Deduplicate", "type": "main", "index": 0 }]] },
    "Deduplicate": { "main": [[{ "node": "CaptionBuilder", "type": "main", "index": 0 }]] },
    "CaptionBuilder": { "main": [[{ "node": "IfVideo", "type": "main", "index": 0 }]] },
    "IfVideo": {
      "main": [
        [{ "node": "SplitVideos", "type": "main", "index": 0 }],
        [{ "node": "SplitImages", "type": "main", "index": 0 }]
      ]
    },
    "SplitImages": { "main": [[{ "node": "SendPhoto", "type": "main", "index": 0 }]] },
    "SendPhoto": { "main": [[{ "node": "WaitImages", "type": "main", "index": 0 }]] },
    "SplitVideos": { "main": [[{ "node": "VideoProcessor", "type": "main", "index": 0 }]] },
    "VideoProcessor": { "main": [[{ "node": "WriteVideo", "type": "main", "index": 0 }]] },
    "WriteVideo": { "main": [[{ "node": "Mux", "type": "main", "index": 0 }]] },
    "Mux": { "main": [[{ "node": "MergeVideoData", "type": "main", "index": 0 }]] },
    "MergeVideoData": { "main": [[{ "node": "SendVideo", "type": "main", "index": 0 }]] },
    "SendVideo": { "main": [[{ "node": "Cleanup", "type": "main", "index": 0 }]] },
    "Cleanup": { "main": [[{ "node": "WaitVideos", "type": "main", "index": 0 }]] }
  }
}
