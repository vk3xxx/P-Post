{
  "name": "P-Post_Content_Automation",
  "comment": "Enterprise-grade workflow: Images use direct URL posting, videos use intelligent processing that elegantly handles both audio+video and video-only cases. TODO: Fix rate_seconds variable passing - currently hardcoded to 45 seconds in WaitImages and WaitVideos nodes.",
  "nodes": [
    {
      "parameters": {},
      "id": "ManualTrigger",
      "name": "ManualTrigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [-1600, 200]
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "subreddit",
              "value": "GOONED"
            },
            {
              "name": "chat_id",
              "value": "-1002899637373"
            }
          ],
          "number": [
            {
              "name": "limit",
              "value": 30
            },
            {
              "name": "rate_seconds",
              "value": 45
            },
            {
              "name": "memory_ttl_days",
              "value": 60
            }
          ]
        },
        "options": {}
      },
      "id": "Vars",
      "name": "Vars",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [-1420, 200]
    },
    {
      "parameters": {
        "url": "https://www.reddit.com/r/GOONED/new.json",
        "options": {
          "timeout": 20000
        }
      },
      "id": "FetchJSON",
      "name": "FetchJSON",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [-1230, 200]
    },
    {
      "parameters": {
        "jsCode": "function dec(u) {\n  try {\n    return u?.replace(/&amp;/g, '&');\n  } catch {\n    return u;\n  }\n}\n\nfunction largestPreview(p) {\n  const img = p?.preview?.images?.[0];\n  return dec(img?.source?.url || img?.s?.u || img?.s?.url);\n}\n\nfunction isImg(u) {\n  return typeof u === 'string' && /(\\.jpg|\\.jpeg|\\.png|\\.gif|\\.webp)(\\?|$)/i.test(u || '');\n}\n\nconst posts = items[0].json?.data?.children || [];\nconst out = [];\n\nfor (const c of posts) {\n  const p = c.data || {};\n  const base = {\n    id: p.id,\n    title: p.title,\n    permalink: `https://www.reddit.com${p.permalink}`,\n    chat_id: $node['Vars'].json['chat_id'],\n    rate_seconds: $node['Vars'].json['rate_seconds']\n  };\n\n  if (p.is_gallery && p.media_metadata) {\n    const ids = p.gallery_data?.items?.map(i => i.media_id) || Object.keys(p.media_metadata);\n    const total = ids.length;\n    ids.forEach((mid, idx) => {\n      const m = p.media_metadata[mid];\n      if (!m) return;\n      const url = dec(m?.s?.u || m?.s?.gif || m?.s?.mp4 || m?.s?.url);\n      if (!url) return;\n      out.push({\n        json: {\n          ...base,\n          is_video: false,\n          media_type: 'image',\n          media_url: url,\n          slide: idx + 1,\n          total\n        }\n      });\n    });\n    continue;\n  }\n\n  const rv = p?.secure_media?.reddit_video || p?.media?.reddit_video || p?.preview?.reddit_video_preview;\n  if (rv?.fallback_url) {\n    const v = dec(rv.fallback_url);\n    let audio = null;\n    \n    // Generate audio URL from video URL\n    try {\n      const videoUrl = new URL(v);\n      const pathParts = videoUrl.pathname.split('/');\n      const filename = pathParts[pathParts.length - 1];\n      \n      // Check if it's a DASH video file\n      if (filename.includes('DASH_') && (filename.endsWith('.mp4') || filename.endsWith('.webm'))) {\n        // Extract quality and extension\n        const match = filename.match(/DASH_(\\d+)(\\.[^.]+)$/);\n        if (match) {\n          const quality = match[1];\n          const extension = match[2];\n          \n          // Construct audio URL\n          const audioFilename = `DASH_audio${extension}`;\n          pathParts[pathParts.length - 1] = audioFilename;\n          videoUrl.pathname = pathParts.join('/');\n          audio = videoUrl.toString();\n        }\n      }\n    } catch (error) {\n      // Audio URL generation failed, continue without audio\n    }\n    \n    out.push({\n      json: {\n        ...base,\n        is_video: true,\n        media_type: 'reddit_video',\n        media_url: v,\n        audio_url: audio,\n        slide: 1,\n        total: 1\n      }\n    });\n    continue;\n  }\n\n  const direct = dec(p.url_overridden_by_dest || p.url);\n  if (isImg(direct)) {\n    out.push({\n      json: {\n        ...base,\n        is_video: false,\n        media_type: 'image',\n        media_url: direct,\n        slide: 1,\n        total: 1\n      }\n    });\n    continue;\n  }\n\n  const prev = largestPreview(p);\n  if (prev) {\n    out.push({\n      json: {\n        ...base,\n        is_video: false,\n        media_type: 'image',\n        media_url: prev,\n        slide: 1,\n        total: 1\n      }\n    });\n  }\n}\n\nreturn out;"
      },
      "id": "ExtractMedia",
      "name": "ExtractMedia",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-1040, 200]
    },
    {
      "parameters": {
        "jsCode": "const state = $getWorkflowStaticData('global');\nif(!state.posted) state.posted={};\nconst ttl=($node['Vars'].json['memory_ttl_days']||60)*24*60*60*1000;\nconst now=Date.now();\nfor(const [k,t] of Object.entries(state.posted)){\n  if(!t||now-t>ttl) delete state.posted[k];\n}\nconst fresh=[];\nfor(const it of items){\n  const k=it.json.key||it.json.media_url||it.json.id;\n  if(!k) continue;\n  if(!state.posted[k]){\n    state.posted[k]=now;\n    fresh.push(it);\n  }\n}\nreturn fresh;"
      },
      "id": "Deduplicate",
      "name": "Deduplicate",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-820, 200]
    },
    {
      "parameters": {
        "jsCode": "return items.map(it => {\n  const j = it.json;\n  j.caption = j.total > 1 ? `${j.title} [${j.slide}/${j.total}]\\n${j.permalink}` : `${j.title}\\n${j.permalink}`;\n  return { json: j };\n});"
      },
      "id": "CaptionBuilder",
      "name": "CaptionBuilder",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-620, 200]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json.is_video}}",
              "value2": true
            }
          ]
        }
      },
      "id": "IfVideo",
      "name": "IfVideo",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [-420, 200]
    },
    {
      "parameters": {
        "batchSize": 1,
        "options": {}
      },
      "id": "SplitImages",
      "name": "SplitImages",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 1,
      "position": [-220, 60]
    },
    {
      "parameters": {
        "operation": "sendPhoto",
        "chatId": "={{$json.chat_id}}",
        "file": "={{ $json.media_url }}",
        "additionalFields": {
          "caption": "={{$json.caption}}"
        }
      },
      "id": "SendPhoto",
      "name": "SendPhoto",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [0, 60]
    },
    {
      "parameters": { "amount": 45, "unit": "seconds" },
      "id": "WaitImages",
      "name": "WaitImages",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [200, 60]
    },
    {
      "parameters": {
        "batchSize": 1,
        "options": {}
      },
      "id": "SplitVideos",
      "name": "SplitVideos",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 1,
      "position": [-220, 340]
    },

    {
      "parameters": {
        "jsCode": "// Debug what DLVideo is trying to download\nconst item = $input.item;\nconsole.log('=== DEBUG DLVIDEO ===');\nconsole.log('Item JSON:', JSON.stringify(item.json, null, 2));\nconsole.log('Media URL:', item.json.media_url);\nconsole.log('Media type:', item.json.media_type);\nconsole.log('ID:', item.json.id);\nconsole.log('Slide:', item.json.slide);\n\n// Check if we have a valid media URL\nif (!item.json.media_url) {\n  console.log('ERROR: No media_url provided');\n  throw new Error('No media_url provided for video download');\n}\n\n// Check if the URL looks valid\nif (!item.json.media_url.startsWith('http')) {\n  console.log('ERROR: Invalid media_url format:', item.json.media_url);\n  throw new Error('Invalid media_url format');\n}\n\nconsole.log('DLVideo should download from:', item.json.media_url);\n\n// Pass through the data\nreturn [{\n  json: {\n    id: item.json.id,\n    media_type: item.json.media_type,\n    slide: item.json.slide,\n    chat_id: item.json.chat_id,\n    caption: item.json.caption,\n    media_url: item.json.media_url\n  }\n}];"
      },
      "id": "DebugDLVideo",
      "name": "DebugDLVideo",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [150, 300]
    },
    {
      "parameters": {
        "url": "={{$json.media_url}}",
        "responseFormat": "file",
        "binaryPropertyName": "video",
        "options": {
          "timeout": 120000,
          "headers": {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
            "Referer": "https://www.reddit.com/",
            "Accept": "video/webm,video/ogg,video/*;q=0.9,application/ogg;q=0.7,audio/*;q=0.6,*/*;q=0.5",
            "Accept-Language": "en-US,en;q=0.5",
            "Accept-Encoding": "gzip, deflate, br",
            "DNT": "1",
            "Connection": "keep-alive",
            "Upgrade-Insecure-Requests": "1"
          }
        }
      },
      "id": "DLVideo",
      "name": "DLVideo",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [200, 300]
    },


    {
      "parameters": {
        "fileName": "=/tmp/n8n_video_{{$json.id}}_{{$json.media_type}}_{{$json.slide}}.mp4",
        "binaryPropertyName": "video"
      },
      "id": "WriteVideo",
      "name": "WriteVideo",
      "type": "n8n-nodes-base.writeBinaryFile",
      "typeVersion": 1,
      "position": [400, 300]
    },
    {
      "parameters": {
        "jsCode": "// Debug what WriteVideo is actually doing\nconst item = $input.item;\nconsole.log('=== DEBUG WRITEVIDEO ===');\nconsole.log('Item JSON:', JSON.stringify(item.json, null, 2));\nconsole.log('Binary properties:', Object.keys(item.binary || {}));\nconsole.log('Video binary size:', item.binary?.video?.data?.length || 'No video data');\nconsole.log('File path would be:', `/tmp/n8n_video_${item.json.id}_${item.json.media_type}_${item.json.slide}.mp4`);\n\n// Check if we have the required fields\nif (!item.json.id || !item.json.media_type || !item.json.slide) {\n  console.log('ERROR: Missing required fields');\n  throw new Error('Missing required fields for video processing');\n}\n\n// Check if we have binary video data\nif (!item.binary?.video) {\n  console.log('ERROR: No binary video data');\n  throw new Error('No binary video data received from DLVideo');\n}\n\nconsole.log('WriteVideo should create file successfully');\n\n// Pass through the data\nreturn [{\n  json: {\n    id: item.json.id,\n    media_type: item.json.media_type,\n    slide: item.json.slide,\n    chat_id: item.json.chat_id,\n    caption: item.json.caption\n  },\n  binary: item.binary\n}];"
      },
      "id": "DebugWriteVideo",
      "name": "DebugWriteVideo",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [450, 300]
    },



    {
      "parameters": {
        "command": "bash -c \"set -e; ID='{{$json.id}}'; TYPE='{{$json.media_type}}'; SLIDE='{{$json.slide}}'; VIDEO_FILE='/tmp/n8n_video_${ID}_${TYPE}_${SLIDE}.mp4'; OUTPUT_FILE='/tmp/n8n_mux_${ID}_${TYPE}_${SLIDE}.mp4'; echo '=== DEBUG INFO ==='; echo 'ID: $ID'; echo 'TYPE: $TYPE'; echo 'SLIDE: $SLIDE'; echo 'VIDEO_FILE: $VIDEO_FILE'; echo 'OUTPUT_FILE: $OUTPUT_FILE'; echo '=== CHECKING FILES ==='; echo 'All files in /tmp:'; ls -la /tmp/ | head -20; echo '=== N8N FILES ==='; ls -la /tmp/ | grep n8n || echo 'No n8n files found'; echo '=== SPECIFIC VIDEO FILE ==='; ls -la \\\"$VIDEO_FILE\\\" 2>/dev/null || echo 'Video file not found'; echo '=== ATTEMPTING PROCESSING ==='; if [ ! -s \\\"$VIDEO_FILE\\\" ]; then echo 'ERROR: Video file not found or empty'; echo 'This means WriteVideo node failed to create the file'; exit 1; fi; echo 'Video file found, copying...'; cp \\\"$VIDEO_FILE\\\" \\\"$OUTPUT_FILE\\\"; echo 'Video processing completed successfully'\""
      },
      "id": "ProcessVideo",
      "name": "ProcessVideo",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [950, 360]
    },

    {
      "parameters": {
        "filePath": "=/tmp/n8n_mux_{{$json.id}}_{{$json.media_type}}_{{$json.slide}}.mp4",
        "binaryPropertyName": "data"
      },
      "id": "ReadMux",
      "name": "ReadMux",
      "type": "n8n-nodes-base.readBinaryFile",
      "typeVersion": 1,
      "position": [1000, 360]
    },

    {
      "parameters": {
        "jsCode": "// Memory-efficient data merging\nconst item = $input.item;\n\n// Validate input data\nif (!item || !item.json || !item.binary) {\n  throw new Error('Invalid input: Missing JSON or binary data');\n}\n\n// Only pass essential data to reduce memory usage\nreturn [{\n  json: {\n    id: item.json.id,\n    chat_id: item.json.chat_id,\n    caption: item.json.caption\n  },\n  binary: item.binary\n}];"
      },
      "id": "MergeVideoData",
      "name": "MergeVideoData",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1200, 360]
    },
    {
      "parameters": {
        "operation": "sendVideo",
        "chatId": "={{$json.chat_id}}",
        "binaryData": true,
        "additionalFields": {
          "caption": "={{$json.caption}}"
        }
      },
      "id": "SendVideo",
      "name": "SendVideo",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [1000, 300]
    },
    {
      "parameters": {
        "command": "rm -f /tmp/n8n_video_{{$json.id}}_{{$json.media_type}}_{{$json.slide}}.mp4 /tmp/n8n_audio_{{$json.id}}_{{$json.media_type}}_{{$json.slide}}.mp4 /tmp/n8n_mux_{{$json.id}}_{{$json.media_type}}_{{$json.slide}}.mp4"
      },
      "id": "Cleanup",
      "name": "Cleanup",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [1200, 300]
    },



    {
      "parameters": { "amount": 45, "unit": "seconds" },
      "id": "WaitVideos",
      "name": "WaitVideos",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [1400, 360]
    }
  ],
  "connections": {
    "ManualTrigger": { "main": [[{ "node": "Vars", "type": "main", "index": 0 }]] },
    "Vars": { "main": [[{ "node": "FetchJSON", "type": "main", "index": 0 }]] },
    "FetchJSON": { "main": [[{ "node": "ExtractMedia", "type": "main", "index": 0 }]] },
    "ExtractMedia": { "main": [[{ "node": "Deduplicate", "type": "main", "index": 0 }]] },
    "Deduplicate": { "main": [[{ "node": "CaptionBuilder", "type": "main", "index": 0 }]] },
    "CaptionBuilder": { "main": [[{ "node": "IfVideo", "type": "main", "index": 0 }]] },
    "IfVideo": {
      "main": [
        [{ "node": "SplitVideos", "type": "main", "index": 0 }],
        [{ "node": "SplitImages", "type": "main", "index": 0 }]
      ]
    },
    "SplitImages": { "main": [[{ "node": "SendPhoto", "type": "main", "index": 0 }]] },
    "SendPhoto": { "main": [[{ "node": "WaitImages", "type": "main", "index": 0 }]] },
    "SplitVideos": { "main": [[{ "node": "DebugDLVideo", "type": "main", "index": 0 }]] },
    "DebugDLVideo": { "main": [[{ "node": "DLVideo", "type": "main", "index": 0 }]] },
    "DLVideo": { "main": [[{ "node": "WriteVideo", "type": "main", "index": 0 }]] },
    "WriteVideo": { "main": [[{ "node": "DebugWriteVideo", "type": "main", "index": 0 }]] },
    "DebugWriteVideo": { "main": [[{ "node": "ProcessVideo", "type": "main", "index": 0 }]] },
    "ProcessVideo": { "main": [[{ "node": "ReadMux", "type": "main", "index": 0 }]] },
    "ReadMux": { "main": [[{ "node": "MergeVideoData", "type": "main", "index": 0 }]] },
    "MergeVideoData": { "main": [[{ "node": "SendVideo", "type": "main", "index": 0 }]] },
    "SendVideo": { "main": [[{ "node": "Cleanup", "type": "main", "index": 0 }]] },
    "Cleanup": { "main": [[{ "node": "WaitVideos", "type": "main", "index": 0 }]] }
  }
}
