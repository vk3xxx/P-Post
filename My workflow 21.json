{
  "name": "My workflow 21",
  "nodes": [
    {
      "parameters": {},
      "id": "2da6e350-feef-4ca4-b2ed-6774291e1424",
      "name": "ManualTrigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -1376,
        144
      ]
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "subreddit",
              "value": "GOONED"
            },
            {
              "name": "chat_id",
              "value": "-1002899637373"
            }
          ],
          "number": [
            {
              "name": "limit",
              "value": 30
            },
            {
              "name": "rate_seconds",
              "value": 45
            },
            {
              "name": "memory_ttl_days",
              "value": 60
            }
          ]
        },
        "options": {}
      },
      "id": "ed47adb9-2c79-4ea2-8c7e-a6e799f891b4",
      "name": "Vars",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        -1200,
        144
      ]
    },
    {
      "parameters": {
        "url": "https://www.reddit.com/r/GOONED/new.json",
        "options": {
          "timeout": 20000
        }
      },
      "id": "dace45a2-6b00-48e9-92d3-89e3f76386dd",
      "name": "FetchJSON",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        -1008,
        144
      ]
    },
    {
      "parameters": {
        "jsCode": "function dec(u) {\n  try {\n    return u?.replace(/&amp;/g, '&');\n  } catch {\n    return u;\n  }\n}\n\nfunction largestPreview(p) {\n  const img = p?.preview?.images?.[0];\n  return dec(img?.source?.url || img?.s?.u || img?.s?.url);\n}\n\nfunction isImg(u) {\n  return typeof u === 'string' && /(\\.jpg|\\.jpeg|\\.png|\\.gif|\\.webp)(\\?|$)/i.test(u || '');\n}\n\nconst posts = items[0].json?.data?.children || [];\nconst out = [];\n\nfor (const c of posts) {\n  const p = c.data || {};\n  const base = {\n    id: p.id,\n    title: p.title,\n    permalink: `https://www.reddit.com${p.permalink}`,\n    chat_id: $node['Vars'].json['chat_id'],\n    rate_seconds: $node['Vars'].json['rate_seconds']\n  };\n\n  if (p.is_gallery && p.media_metadata) {\n    const ids = p.gallery_data?.items?.map(i => i.media_id) || Object.keys(p.media_metadata);\n    const total = ids.length;\n    ids.forEach((mid, idx) => {\n      const m = p.media_metadata[mid];\n      if (!m) return;\n      const url = dec(m?.s?.u || m?.s?.gif || m?.s?.mp4 || m?.s?.url);\n      if (!url) return;\n      out.push({\n        json: {\n          ...base,\n          is_video: false,\n          media_type: 'image',\n          media_url: url,\n          slide: idx + 1,\n          total\n        }\n      });\n    });\n    continue;\n  }\n\n  const rv = p?.secure_media?.reddit_video || p?.media?.reddit_video || p?.preview?.reddit_video_preview;\n  if (rv?.fallback_url) {\n    const v = dec(rv.fallback_url);\n    let audio;\n    try {\n      const u = new URL(v);\n      const m = u.pathname.match(/\\/DASH_[^\\/]+\\.(mp4|webm)$/i);\n      if (m) {\n        u.pathname = u.pathname.replace(/\\/DASH_[^\\/]+\\.(mp4|webm)$/i, '/DASH_audio.' + m[1]);\n        audio = u.toString();\n      }\n    } catch {}\n    out.push({\n      json: {\n        ...base,\n        is_video: true,\n        media_type: 'reddit_video',\n        media_url: v,\n        audio_url: audio,\n        slide: 1,\n        total: 1\n      }\n    });\n    continue;\n  }\n\n  const direct = dec(p.url_overridden_by_dest || p.url);\n  if (isImg(direct)) {\n    out.push({\n      json: {\n        ...base,\n        is_video: false,\n        media_type: 'image',\n        media_url: direct,\n        slide: 1,\n        total: 1\n      }\n    });\n    continue;\n  }\n\n  const prev = largestPreview(p);\n  if (prev) {\n    out.push({\n      json: {\n        ...base,\n        is_video: false,\n        media_type: 'image',\n        media_url: prev,\n        slide: 1,\n        total: 1\n      }\n    });\n  }\n}\n\nreturn out;"
      },
      "id": "e28124bd-cc3f-4352-ba00-b9bddb535e33",
      "name": "ExtractMedia",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -816,
        144
      ]
    },
    {
      "parameters": {
        "jsCode": "const state = $getWorkflowStaticData('global');\nif(!state.posted) state.posted={};\nconst ttl=($node['Vars'].json['memory_ttl_days']||60)*24*60*60*1000;\nconst now=Date.now();\nfor(const [k,t] of Object.entries(state.posted)){\n  if(!t||now-t>ttl) delete state.posted[k];\n}\nconst fresh=[];\nfor(const it of items){\n  const k=it.json.key||it.json.media_url||it.json.id;\n  if(!k) continue;\n  if(!state.posted[k]){\n    state.posted[k]=now;\n    fresh.push(it);\n  }\n}\nreturn fresh;"
      },
      "id": "01cdc106-bb79-43a1-8965-5a3c865a20d3",
      "name": "Deduplicate",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -608,
        144
      ]
    },
    {
      "parameters": {
        "jsCode": "return items.map(it => {\n  const j = it.json;\n  j.caption = j.total > 1 ? `${j.title} [${j.slide}/${j.total}]\\n${j.permalink}` : `${j.title}\\n${j.permalink}`;\n  return { json: j };\n});"
      },
      "id": "138cb474-b19e-48ac-bb71-8f045eedb971",
      "name": "CaptionBuilder",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -400,
        144
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json.is_video}}",
              "value2": true
            }
          ]
        }
      },
      "id": "93df9a21-ffdf-430e-a3b6-56525fc51fd6",
      "name": "IfVideo",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        -208,
        144
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "a50422fc-9214-47cb-b9ed-7c64e8c756b4",
      "name": "SplitImages",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 1,
      "position": [
        0,
        0
      ]
    },
    {
      "parameters": {
        "operation": "sendPhoto",
        "chatId": "={{$json.chat_id}}",
        "file": "={{ $json.media_url }}",
        "additionalFields": {
          "caption": "={{$json.caption}}"
        }
      },
      "id": "5a05b79e-4e84-4c80-9edd-80bc5ee51175",
      "name": "SendPhoto",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [
        224,
        0
      ],
      "webhookId": "823b8566-7732-49b2-a75d-7e8df453427d",
      "credentials": {
        "telegramApi": {
          "id": "QoMqqcK9v4tT5gCO",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "amount": 45,
        "unit": "seconds"
      },
      "id": "cbd31ddb-b3fe-41d8-bab6-2cbf98075b26",
      "name": "WaitImages",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [
        432,
        0
      ],
      "webhookId": "a2e44d65-477a-4e89-a542-63f1b50978f3"
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "c5292a41-ca15-4ec6-ad52-cfdcb776a730",
      "name": "SplitVideos",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 1,
      "position": [
        0,
        288
      ]
    },
    {
      "parameters": {
        "url": "={{$json.media_url}}",
        "options": {
          "timeout": 120000
        }
      },
      "id": "e4c713b3-7c8d-4955-a02c-273693acd83c",
      "name": "DLVideo",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        224,
        240
      ]
    },
    {
      "parameters": {
        "url": "={{$json.audio_url}}",
        "options": {
          "timeout": 120000
        }
      },
      "id": "bb68045a-4e92-44b8-9540-079e6538b4b5",
      "name": "DLAudio",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        224,
        368
      ]
    },
    {
      "parameters": {
        "mode": "mergeByPosition",
        "options": {}
      },
      "id": "2793b9ed-4ec8-41ed-bc16-b123153a3121",
      "name": "CombineMedia",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [
        432,
        304
      ]
    },
    {
      "parameters": {
        "fileName": "=/tmp/n8n_video_{{$json.id}}.mp4",
        "options": {}
      },
      "id": "ff0d29ad-35f2-45df-9557-e2e40cd292bd",
      "name": "WriteVideo",
      "type": "n8n-nodes-base.writeBinaryFile",
      "typeVersion": 1,
      "position": [
        624,
        240
      ]
    },
    {
      "parameters": {
        "fileName": "=/tmp/n8n_audio_{{$json.id}}.mp4",
        "options": {}
      },
      "id": "aee5482f-b470-4ac8-a4fb-264c9fcde33f",
      "name": "WriteAudio",
      "type": "n8n-nodes-base.writeBinaryFile",
      "typeVersion": 1,
      "position": [
        624,
        368
      ]
    },
    {
      "parameters": {
        "command": "bash -lc \"set -e; if [ -s /tmp/n8n_audio_{{$json.id}}.mp4 ]; then ffmpeg -y -loglevel error -i /tmp/n8n_video_{{$json.id}}.mp4 -i /tmp/n8n_audio_{{$json.id}}.mp4 -c copy -shortest /tmp/n8n_mux_{{$json.id}}.mp4; else cp /tmp/n8n_video_{{$json.id}}.mp4 /tmp/n8n_mux_{{$json.id}}.mp4; fi\""
      },
      "id": "59c761e0-8305-4eb1-bce3-ad2cc3a99db4",
      "name": "Mux",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        832,
        304
      ]
    },
    {
      "parameters": {
        "filePath": "=/tmp/n8n_mux_{{$json.id}}.mp4"
      },
      "id": "52a6da25-aacf-4b08-a94c-5479fddde96e",
      "name": "ReadMux",
      "type": "n8n-nodes-base.readBinaryFile",
      "typeVersion": 1,
      "position": [
        1024,
        304
      ]
    },
    {
      "parameters": {
        "jsCode": "// Merge binary video data with original JSON data\nconst originalData = $input.item.json;\nconst binaryData = $input.item.binary;\n\n// Create new item with both data and binary\nreturn [{\n  json: originalData,\n  binary: binaryData\n}];"
      },
      "id": "26b05126-e5fd-4c4e-b218-7f76741c7042",
      "name": "MergeVideoData",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1120,
        304
      ]
    },
    {
      "parameters": {
        "operation": "sendVideo",
        "chatId": "={{$json.chat_id}}",
        "binaryData": true,
        "additionalFields": {
          "caption": "={{$json.caption}}"
        }
      },
      "id": "80bb5a0f-6ae7-4225-a048-bf11d8662e0c",
      "name": "SendVideo",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [
        1232,
        304
      ],
      "webhookId": "442c3dbb-f115-4b73-982e-7b2b8a88b9e6"
    },
    {
      "parameters": {
        "command": "bash -lc \"rm -f /tmp/n8n_*_{{$json.id}}.mp4 || true\""
      },
      "id": "96ddf2cc-92c4-431c-929f-d2ce687a2209",
      "name": "Cleanup",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1424,
        304
      ]
    },
    {
      "parameters": {
        "amount": 45,
        "unit": "seconds"
      },
      "id": "8f5e9e4f-5955-4177-9404-8fdbea7a9f59",
      "name": "WaitVideos",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [
        1632,
        304
      ],
      "webhookId": "05ed7b6f-61bc-4df5-9a22-ea02b3ca14e4"
    }
  ],
  "pinData": {},
  "connections": {
    "ManualTrigger": {
      "main": [
        [
          {
            "node": "Vars",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Vars": {
      "main": [
        [
          {
            "node": "FetchJSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "FetchJSON": {
      "main": [
        [
          {
            "node": "ExtractMedia",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ExtractMedia": {
      "main": [
        [
          {
            "node": "Deduplicate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Deduplicate": {
      "main": [
        [
          {
            "node": "CaptionBuilder",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "CaptionBuilder": {
      "main": [
        [
          {
            "node": "IfVideo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IfVideo": {
      "main": [
        [
          {
            "node": "SplitVideos",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "SplitImages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SplitImages": {
      "main": [
        [
          {
            "node": "SendPhoto",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SendPhoto": {
      "main": [
        [
          {
            "node": "WaitImages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SplitVideos": {
      "main": [
        [
          {
            "node": "DLVideo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DLVideo": {
      "main": [
        [
          {
            "node": "CombineMedia",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DLAudio": {
      "main": [
        [
          {
            "node": "CombineMedia",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "CombineMedia": {
      "main": [
        [
          {
            "node": "WriteVideo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "WriteVideo": {
      "main": [
        [
          {
            "node": "Mux",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "WriteAudio": {
      "main": [
        [
          {
            "node": "Mux",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mux": {
      "main": [
        [
          {
            "node": "ReadMux",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ReadMux": {
      "main": [
        [
          {
            "node": "MergeVideoData",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MergeVideoData": {
      "main": [
        [
          {
            "node": "SendVideo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SendVideo": {
      "main": [
        [
          {
            "node": "Cleanup",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cleanup": {
      "main": [
        [
          {
            "node": "WaitVideos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "4b27aebc-0e43-4742-8fdd-16746b58d2e7",
  "meta": {
    "instanceId": "4d9b5176904a7ad3adb817dfcf3ed0c7ce744108f936c17d31d5bb74b7b855c2"
  },
  "id": "9is7T2JTLRWo0sNs",
  "tags": []
}